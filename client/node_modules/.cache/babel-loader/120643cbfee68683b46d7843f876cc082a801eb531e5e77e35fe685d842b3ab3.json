{"ast":null,"code":"/**\r\n * Settings Store\r\n * Manages application settings and configuration using Zustand\r\n */\n\nimport create from 'zustand';\n\n/**\r\n * @typedef {Object} RateLimits\r\n * @property {number} profilesPerMinute - Max profiles to check per minute\r\n * @property {number} threadsCount - Number of concurrent threads\r\n * @property {number} batchSize - Default batch size\r\n */\n\n/**\r\n * @typedef {Object} Proxy\r\n * @property {string} id - Unique identifier\r\n * @property {string} host - Proxy host\r\n * @property {number} port - Proxy port\r\n * @property {string} [username] - Auth username\r\n * @property {string} [password] - Auth password\r\n * @property {boolean} active - Whether proxy is active\r\n * @property {string} lastTested - Last test timestamp\r\n */\n\n/**\r\n * @typedef {Object} SystemSettings\r\n * @property {boolean} autoTrigger - Enable automatic batch triggering\r\n * @property {number} resultRetention - Hours to keep results\r\n * @property {boolean} notificationsEnabled - Enable notifications\r\n */\n\n/**\r\n * @typedef {Object} StoryTargets\r\n * @property {number} minStories - Minimum stories required\r\n * @property {number} maxStories - Maximum stories allowed\r\n * @property {number} minFollowers - Minimum followers required\r\n * @property {number} maxFollowers - Maximum followers allowed\r\n * @property {number} minEngagement - Minimum engagement rate\r\n * @property {number} maxEngagement - Maximum engagement rate\r\n */\n\n/**\r\n * @typedef {Object} SettingsState\r\n * @property {RateLimits} rateLimits - Rate limiting settings\r\n * @property {Array<Proxy>} proxies - Configured proxies\r\n * @property {SystemSettings} system - System settings\r\n * @property {StoryTargets} targets - Story target settings\r\n * @property {boolean} loading - Loading state\r\n * @property {string|null} error - Error message\r\n */\n\nconst useSettingsStore = create((set, get) => ({\n  // Initial state\n  rateLimits: {\n    profilesPerMinute: 30,\n    threadsCount: 3,\n    batchSize: 100\n  },\n  proxies: [],\n  system: {\n    autoTrigger: true,\n    resultRetention: 24,\n    notificationsEnabled: true\n  },\n  loading: false,\n  targets: {\n    minStories: 1,\n    maxStories: 10,\n    minFollowers: 1000,\n    maxFollowers: 100000,\n    minEngagement: 1,\n    maxEngagement: 10\n  },\n  error: null,\n  // Actions\n  fetchSettings: async () => {\n    // TODO: Implementation\n    // 1. Load from API\n    // 2. Update state\n    // 3. Handle errors\n  },\n  updateRateLimits: async updates => {\n    // TODO: Implementation\n    // 1. Validate limits\n    // 2. Save to API\n    // 3. Update state\n  },\n  addProxy: async proxy => {\n    // TODO: Implementation\n    // 1. Validate proxy\n    // 2. Test connection\n    // 3. Save to API\n    // 4. Update state\n  },\n  removeProxy: async proxyId => {\n    // TODO: Implementation\n    // 1. Validate removal\n    // 2. Remove from API\n    // 3. Update state\n  },\n  testProxy: async proxyId => {\n    // TODO: Implementation\n    // 1. Test connection\n    // 2. Update status\n    // 3. Handle errors\n  },\n  updateSystemSettings: async updates => {\n    // TODO: Implementation\n    // 1. Validate settings\n    // 2. Save to API\n    // 3. Update state\n  },\n  resetSettings: async () => {\n    // TODO: Implementation\n    // 1. Confirm reset\n    // 2. Reset in API\n    // 3. Update state\n  },\n  updateTargets: async updates => {\n    try {\n      set(state => ({\n        targets: {\n          ...state.targets,\n          ...updates\n        }\n      }));\n    } catch (error) {\n      set({\n        error: error.message\n      });\n    }\n  },\n  clearError: () => set({\n    error: null\n  })\n}));\nexport default useSettingsStore;","map":{"version":3,"names":["create","useSettingsStore","set","get","rateLimits","profilesPerMinute","threadsCount","batchSize","proxies","system","autoTrigger","resultRetention","notificationsEnabled","loading","targets","minStories","maxStories","minFollowers","maxFollowers","minEngagement","maxEngagement","error","fetchSettings","updateRateLimits","updates","addProxy","proxy","removeProxy","proxyId","testProxy","updateSystemSettings","resetSettings","updateTargets","state","message","clearError"],"sources":["C:/Users/Andrew Scherer/Desktop/IG Story Checker/client/src/stores/settingsStore.js"],"sourcesContent":["/**\r\n * Settings Store\r\n * Manages application settings and configuration using Zustand\r\n */\r\n\r\nimport create from 'zustand';\r\n\r\n/**\r\n * @typedef {Object} RateLimits\r\n * @property {number} profilesPerMinute - Max profiles to check per minute\r\n * @property {number} threadsCount - Number of concurrent threads\r\n * @property {number} batchSize - Default batch size\r\n */\r\n\r\n/**\r\n * @typedef {Object} Proxy\r\n * @property {string} id - Unique identifier\r\n * @property {string} host - Proxy host\r\n * @property {number} port - Proxy port\r\n * @property {string} [username] - Auth username\r\n * @property {string} [password] - Auth password\r\n * @property {boolean} active - Whether proxy is active\r\n * @property {string} lastTested - Last test timestamp\r\n */\r\n\r\n/**\r\n * @typedef {Object} SystemSettings\r\n * @property {boolean} autoTrigger - Enable automatic batch triggering\r\n * @property {number} resultRetention - Hours to keep results\r\n * @property {boolean} notificationsEnabled - Enable notifications\r\n */\r\n\r\n/**\r\n * @typedef {Object} StoryTargets\r\n * @property {number} minStories - Minimum stories required\r\n * @property {number} maxStories - Maximum stories allowed\r\n * @property {number} minFollowers - Minimum followers required\r\n * @property {number} maxFollowers - Maximum followers allowed\r\n * @property {number} minEngagement - Minimum engagement rate\r\n * @property {number} maxEngagement - Maximum engagement rate\r\n */\r\n\r\n/**\r\n * @typedef {Object} SettingsState\r\n * @property {RateLimits} rateLimits - Rate limiting settings\r\n * @property {Array<Proxy>} proxies - Configured proxies\r\n * @property {SystemSettings} system - System settings\r\n * @property {StoryTargets} targets - Story target settings\r\n * @property {boolean} loading - Loading state\r\n * @property {string|null} error - Error message\r\n */\r\n\r\nconst useSettingsStore = create((set, get) => ({\r\n  // Initial state\r\n  rateLimits: {\r\n    profilesPerMinute: 30,\r\n    threadsCount: 3,\r\n    batchSize: 100\r\n  },\r\n  proxies: [],\r\n  system: {\r\n    autoTrigger: true,\r\n    resultRetention: 24,\r\n    notificationsEnabled: true\r\n  },\r\n  loading: false,\r\n  targets: {\r\n    minStories: 1,\r\n    maxStories: 10,\r\n    minFollowers: 1000,\r\n    maxFollowers: 100000,\r\n    minEngagement: 1,\r\n    maxEngagement: 10\r\n  },\r\n  error: null,\r\n\r\n  // Actions\r\n  fetchSettings: async () => {\r\n    // TODO: Implementation\r\n    // 1. Load from API\r\n    // 2. Update state\r\n    // 3. Handle errors\r\n  },\r\n\r\n  updateRateLimits: async (updates) => {\r\n    // TODO: Implementation\r\n    // 1. Validate limits\r\n    // 2. Save to API\r\n    // 3. Update state\r\n  },\r\n\r\n  addProxy: async (proxy) => {\r\n    // TODO: Implementation\r\n    // 1. Validate proxy\r\n    // 2. Test connection\r\n    // 3. Save to API\r\n    // 4. Update state\r\n  },\r\n\r\n  removeProxy: async (proxyId) => {\r\n    // TODO: Implementation\r\n    // 1. Validate removal\r\n    // 2. Remove from API\r\n    // 3. Update state\r\n  },\r\n\r\n  testProxy: async (proxyId) => {\r\n    // TODO: Implementation\r\n    // 1. Test connection\r\n    // 2. Update status\r\n    // 3. Handle errors\r\n  },\r\n\r\n  updateSystemSettings: async (updates) => {\r\n    // TODO: Implementation\r\n    // 1. Validate settings\r\n    // 2. Save to API\r\n    // 3. Update state\r\n  },\r\n\r\n  resetSettings: async () => {\r\n    // TODO: Implementation\r\n    // 1. Confirm reset\r\n    // 2. Reset in API\r\n    // 3. Update state\r\n  },\r\n\r\n  updateTargets: async (updates) => {\r\n    try {\r\n      set(state => ({\r\n        targets: { ...state.targets, ...updates }\r\n      }));\r\n    } catch (error) {\r\n      set({ error: error.message });\r\n    }\r\n  },\r\n\r\n  clearError: () => set({ error: null })\r\n}));\r\n\r\nexport default useSettingsStore;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,OAAOA,MAAM,MAAM,SAAS;;AAE5B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,gBAAgB,GAAGD,MAAM,CAAC,CAACE,GAAG,EAAEC,GAAG,MAAM;EAC7C;EACAC,UAAU,EAAE;IACVC,iBAAiB,EAAE,EAAE;IACrBC,YAAY,EAAE,CAAC;IACfC,SAAS,EAAE;EACb,CAAC;EACDC,OAAO,EAAE,EAAE;EACXC,MAAM,EAAE;IACNC,WAAW,EAAE,IAAI;IACjBC,eAAe,EAAE,EAAE;IACnBC,oBAAoB,EAAE;EACxB,CAAC;EACDC,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACPC,UAAU,EAAE,CAAC;IACbC,UAAU,EAAE,EAAE;IACdC,YAAY,EAAE,IAAI;IAClBC,YAAY,EAAE,MAAM;IACpBC,aAAa,EAAE,CAAC;IAChBC,aAAa,EAAE;EACjB,CAAC;EACDC,KAAK,EAAE,IAAI;EAEX;EACAC,aAAa,EAAE,MAAAA,CAAA,KAAY;IACzB;IACA;IACA;IACA;EAAA,CACD;EAEDC,gBAAgB,EAAE,MAAOC,OAAO,IAAK;IACnC;IACA;IACA;IACA;EAAA,CACD;EAEDC,QAAQ,EAAE,MAAOC,KAAK,IAAK;IACzB;IACA;IACA;IACA;IACA;EAAA,CACD;EAEDC,WAAW,EAAE,MAAOC,OAAO,IAAK;IAC9B;IACA;IACA;IACA;EAAA,CACD;EAEDC,SAAS,EAAE,MAAOD,OAAO,IAAK;IAC5B;IACA;IACA;IACA;EAAA,CACD;EAEDE,oBAAoB,EAAE,MAAON,OAAO,IAAK;IACvC;IACA;IACA;IACA;EAAA,CACD;EAEDO,aAAa,EAAE,MAAAA,CAAA,KAAY;IACzB;IACA;IACA;IACA;EAAA,CACD;EAEDC,aAAa,EAAE,MAAOR,OAAO,IAAK;IAChC,IAAI;MACFtB,GAAG,CAAC+B,KAAK,KAAK;QACZnB,OAAO,EAAE;UAAE,GAAGmB,KAAK,CAACnB,OAAO;UAAE,GAAGU;QAAQ;MAC1C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,OAAOH,KAAK,EAAE;MACdnB,GAAG,CAAC;QAAEmB,KAAK,EAAEA,KAAK,CAACa;MAAQ,CAAC,CAAC;IAC/B;EACF,CAAC;EAEDC,UAAU,EAAEA,CAAA,KAAMjC,GAAG,CAAC;IAAEmB,KAAK,EAAE;EAAK,CAAC;AACvC,CAAC,CAAC,CAAC;AAEH,eAAepB,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}