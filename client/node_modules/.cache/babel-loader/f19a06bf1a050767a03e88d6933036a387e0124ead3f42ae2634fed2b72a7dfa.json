{"ast":null,"code":"import create from 'zustand';\n\n// Initial dummy data for testing\nconst dummyNiches = [{\n  id: 1,\n  name: 'Fitness',\n  order: 1\n}, {\n  id: 2,\n  name: 'Fashion',\n  order: 2\n}, {\n  id: 3,\n  name: 'Food',\n  order: 3\n}];\nconst useNicheStore = create((set, get) => ({\n  // State\n  niches: dummyNiches,\n  // Initialize with dummy data\n  selectedNicheId: null,\n  loading: false,\n  error: null,\n  // Actions\n  setNiches: niches => set({\n    niches\n  }),\n  setSelectedNicheId: id => set({\n    selectedNicheId: id\n  }),\n  addNiche: niche => {\n    const niches = get().niches;\n    const newNiche = {\n      ...niche,\n      id: Date.now(),\n      // Simple ID generation\n      order: niches.length + 1\n    };\n    set({\n      niches: [...niches, newNiche]\n    });\n  },\n  updateNiche: (id, updates) => {\n    const niches = get().niches.map(niche => niche.id === id ? {\n      ...niche,\n      ...updates\n    } : niche);\n    set({\n      niches\n    });\n  },\n  deleteNiche: id => {\n    const niches = get().niches.filter(niche => niche.id !== id);\n    set({\n      niches,\n      selectedNicheId: get().selectedNicheId === id ? null : get().selectedNicheId\n    });\n  },\n  reorderNiches: (fromIndex, toIndex) => {\n    const niches = [...get().niches];\n    const [movedNiche] = niches.splice(fromIndex, 1);\n    niches.splice(toIndex, 0, movedNiche);\n\n    // Update order property for each niche\n    const updatedNiches = niches.map((niche, index) => ({\n      ...niche,\n      order: index + 1\n    }));\n    set({\n      niches: updatedNiches\n    });\n  },\n  setLoading: loading => set({\n    loading\n  }),\n  setError: error => set({\n    error\n  }),\n  clearError: () => set({\n    error: null\n  }),\n  // Selectors\n  getSortedNiches: () => {\n    const {\n      niches\n    } = get();\n    return [...niches].sort((a, b) => a.order - b.order);\n  },\n  getSelectedNiche: () => {\n    const {\n      niches,\n      selectedNicheId\n    } = get();\n    return niches.find(niche => niche.id === selectedNicheId) || null;\n  }\n}));\nexport default useNicheStore;","map":{"version":3,"names":["create","dummyNiches","id","name","order","useNicheStore","set","get","niches","selectedNicheId","loading","error","setNiches","setSelectedNicheId","addNiche","niche","newNiche","Date","now","length","updateNiche","updates","map","deleteNiche","filter","reorderNiches","fromIndex","toIndex","movedNiche","splice","updatedNiches","index","setLoading","setError","clearError","getSortedNiches","sort","a","b","getSelectedNiche","find"],"sources":["C:/Users/Andrew Scherer/Desktop/IG Story Checker/client/src/stores/nicheStore.js"],"sourcesContent":["import create from 'zustand';\r\n\r\n// Initial dummy data for testing\r\nconst dummyNiches = [\r\n  { id: 1, name: 'Fitness', order: 1 },\r\n  { id: 2, name: 'Fashion', order: 2 },\r\n  { id: 3, name: 'Food', order: 3 }\r\n];\r\n\r\nconst useNicheStore = create((set, get) => ({\r\n  // State\r\n  niches: dummyNiches, // Initialize with dummy data\r\n  selectedNicheId: null,\r\n  loading: false,\r\n  error: null,\r\n\r\n  // Actions\r\n  setNiches: (niches) => set({ niches }),\r\n  \r\n  setSelectedNicheId: (id) => set({ selectedNicheId: id }),\r\n  \r\n  addNiche: (niche) => {\r\n    const niches = get().niches;\r\n    const newNiche = {\r\n      ...niche,\r\n      id: Date.now(), // Simple ID generation\r\n      order: niches.length + 1\r\n    };\r\n    set({ niches: [...niches, newNiche] });\r\n  },\r\n\r\n  updateNiche: (id, updates) => {\r\n    const niches = get().niches.map(niche =>\r\n      niche.id === id ? { ...niche, ...updates } : niche\r\n    );\r\n    set({ niches });\r\n  },\r\n\r\n  deleteNiche: (id) => {\r\n    const niches = get().niches.filter(niche => niche.id !== id);\r\n    set({ \r\n      niches,\r\n      selectedNicheId: get().selectedNicheId === id ? null : get().selectedNicheId\r\n    });\r\n  },\r\n\r\n  reorderNiches: (fromIndex, toIndex) => {\r\n    const niches = [...get().niches];\r\n    const [movedNiche] = niches.splice(fromIndex, 1);\r\n    niches.splice(toIndex, 0, movedNiche);\r\n    \r\n    // Update order property for each niche\r\n    const updatedNiches = niches.map((niche, index) => ({\r\n      ...niche,\r\n      order: index + 1\r\n    }));\r\n    \r\n    set({ niches: updatedNiches });\r\n  },\r\n\r\n  setLoading: (loading) => set({ loading }),\r\n  setError: (error) => set({ error }),\r\n  clearError: () => set({ error: null }),\r\n\r\n  // Selectors\r\n  getSortedNiches: () => {\r\n    const { niches } = get();\r\n    return [...niches].sort((a, b) => a.order - b.order);\r\n  },\r\n\r\n  getSelectedNiche: () => {\r\n    const { niches, selectedNicheId } = get();\r\n    return niches.find(niche => niche.id === selectedNicheId) || null;\r\n  }\r\n}));\r\n\r\nexport default useNicheStore;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}