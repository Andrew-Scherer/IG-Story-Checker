{"ast":null,"code":"/**\r\n * Profile Store\r\n * Manages profile state and operations using Zustand\r\n */\n\nimport create from 'zustand';\n\n/**\r\n * @typedef {Object} Profile\r\n * @property {string} id - Unique identifier\r\n * @property {string} username - Instagram username\r\n * @property {string} url - Instagram profile URL\r\n * @property {string} nicheId - Associated niche ID\r\n * @property {string} status - Profile status (active/deleted)\r\n * @property {string} lastChecked - Last check timestamp\r\n * @property {string} lastDetected - Last story detection\r\n * @property {number} totalChecks - Total checks performed\r\n * @property {number} totalDetections - Total stories detected\r\n */\n\n/**\r\n * @typedef {Object} ProfileFilters\r\n * @property {string} [nicheId] - Filter by niche\r\n * @property {string} [status] - Filter by status\r\n * @property {string} [search] - Search term\r\n */\n\n/**\r\n * @typedef {Object} ProfileState\r\n * @property {Array<Profile>} profiles - List of profiles\r\n * @property {ProfileFilters} filters - Active filters\r\n * @property {Object} pagination - Pagination state\r\n * @property {boolean} loading - Loading state\r\n * @property {string|null} error - Error message\r\n */\n\nconst useProfileStore = create((set, get) => ({\n  // Initial state\n  profiles: [],\n  filters: {\n    nicheId: null,\n    status: 'active',\n    search: ''\n  },\n  pagination: {\n    page: 1,\n    pageSize: 20,\n    total: 0\n  },\n  loading: false,\n  error: null,\n  // Actions\n  fetchProfiles: async (filters = {}) => {\n    // TODO: Implementation\n    // 1. Set loading state\n    // 2. Apply filters\n    // 3. Fetch from API\n    // 4. Update state\n  },\n  addProfiles: async profiles => {\n    // TODO: Implementation\n    // 1. Validate profiles\n    // 2. Check duplicates\n    // 3. Batch create\n    // 4. Update state\n  },\n  updateProfile: async (id, updates) => {\n    // TODO: Implementation\n    // 1. Validate updates\n    // 2. Send to API\n    // 3. Update local state\n  },\n  deleteProfiles: async ids => {\n    // TODO: Implementation\n    // 1. Validate deletions\n    // 2. Batch delete\n    // 3. Update state\n  },\n  assignToNiche: async (profileIds, nicheId) => {\n    // TODO: Implementation\n    // 1. Validate niche\n    // 2. Batch update\n    // 3. Update state\n  },\n  setFilters: newFilters => {\n    // TODO: Implementation\n    // 1. Merge with existing\n    // 2. Reset pagination\n    // 3. Trigger fetch\n  },\n  setPagination: updates => {\n    // TODO: Implementation\n    // 1. Update pagination\n    // 2. Trigger fetch\n  },\n  clearError: () => set({\n    error: null\n  })\n}));\nexport default useProfileStore;","map":{"version":3,"names":["create","useProfileStore","set","get","profiles","filters","nicheId","status","search","pagination","page","pageSize","total","loading","error","fetchProfiles","addProfiles","updateProfile","id","updates","deleteProfiles","ids","assignToNiche","profileIds","setFilters","newFilters","setPagination","clearError"],"sources":["C:/Users/Andrew Scherer/Desktop/IG Story Checker/client/src/stores/profileStore.js"],"sourcesContent":["/**\r\n * Profile Store\r\n * Manages profile state and operations using Zustand\r\n */\r\n\r\nimport create from 'zustand';\r\n\r\n/**\r\n * @typedef {Object} Profile\r\n * @property {string} id - Unique identifier\r\n * @property {string} username - Instagram username\r\n * @property {string} url - Instagram profile URL\r\n * @property {string} nicheId - Associated niche ID\r\n * @property {string} status - Profile status (active/deleted)\r\n * @property {string} lastChecked - Last check timestamp\r\n * @property {string} lastDetected - Last story detection\r\n * @property {number} totalChecks - Total checks performed\r\n * @property {number} totalDetections - Total stories detected\r\n */\r\n\r\n/**\r\n * @typedef {Object} ProfileFilters\r\n * @property {string} [nicheId] - Filter by niche\r\n * @property {string} [status] - Filter by status\r\n * @property {string} [search] - Search term\r\n */\r\n\r\n/**\r\n * @typedef {Object} ProfileState\r\n * @property {Array<Profile>} profiles - List of profiles\r\n * @property {ProfileFilters} filters - Active filters\r\n * @property {Object} pagination - Pagination state\r\n * @property {boolean} loading - Loading state\r\n * @property {string|null} error - Error message\r\n */\r\n\r\nconst useProfileStore = create((set, get) => ({\r\n  // Initial state\r\n  profiles: [],\r\n  filters: {\r\n    nicheId: null,\r\n    status: 'active',\r\n    search: ''\r\n  },\r\n  pagination: {\r\n    page: 1,\r\n    pageSize: 20,\r\n    total: 0\r\n  },\r\n  loading: false,\r\n  error: null,\r\n\r\n  // Actions\r\n  fetchProfiles: async (filters = {}) => {\r\n    // TODO: Implementation\r\n    // 1. Set loading state\r\n    // 2. Apply filters\r\n    // 3. Fetch from API\r\n    // 4. Update state\r\n  },\r\n\r\n  addProfiles: async (profiles) => {\r\n    // TODO: Implementation\r\n    // 1. Validate profiles\r\n    // 2. Check duplicates\r\n    // 3. Batch create\r\n    // 4. Update state\r\n  },\r\n\r\n  updateProfile: async (id, updates) => {\r\n    // TODO: Implementation\r\n    // 1. Validate updates\r\n    // 2. Send to API\r\n    // 3. Update local state\r\n  },\r\n\r\n  deleteProfiles: async (ids) => {\r\n    // TODO: Implementation\r\n    // 1. Validate deletions\r\n    // 2. Batch delete\r\n    // 3. Update state\r\n  },\r\n\r\n  assignToNiche: async (profileIds, nicheId) => {\r\n    // TODO: Implementation\r\n    // 1. Validate niche\r\n    // 2. Batch update\r\n    // 3. Update state\r\n  },\r\n\r\n  setFilters: (newFilters) => {\r\n    // TODO: Implementation\r\n    // 1. Merge with existing\r\n    // 2. Reset pagination\r\n    // 3. Trigger fetch\r\n  },\r\n\r\n  setPagination: (updates) => {\r\n    // TODO: Implementation\r\n    // 1. Update pagination\r\n    // 2. Trigger fetch\r\n  },\r\n\r\n  clearError: () => set({ error: null })\r\n}));\r\n\r\nexport default useProfileStore;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,OAAOA,MAAM,MAAM,SAAS;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,eAAe,GAAGD,MAAM,CAAC,CAACE,GAAG,EAAEC,GAAG,MAAM;EAC5C;EACAC,QAAQ,EAAE,EAAE;EACZC,OAAO,EAAE;IACPC,OAAO,EAAE,IAAI;IACbC,MAAM,EAAE,QAAQ;IAChBC,MAAM,EAAE;EACV,CAAC;EACDC,UAAU,EAAE;IACVC,IAAI,EAAE,CAAC;IACPC,QAAQ,EAAE,EAAE;IACZC,KAAK,EAAE;EACT,CAAC;EACDC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE,IAAI;EAEX;EACAC,aAAa,EAAE,MAAAA,CAAOV,OAAO,GAAG,CAAC,CAAC,KAAK;IACrC;IACA;IACA;IACA;IACA;EAAA,CACD;EAEDW,WAAW,EAAE,MAAOZ,QAAQ,IAAK;IAC/B;IACA;IACA;IACA;IACA;EAAA,CACD;EAEDa,aAAa,EAAE,MAAAA,CAAOC,EAAE,EAAEC,OAAO,KAAK;IACpC;IACA;IACA;IACA;EAAA,CACD;EAEDC,cAAc,EAAE,MAAOC,GAAG,IAAK;IAC7B;IACA;IACA;IACA;EAAA,CACD;EAEDC,aAAa,EAAE,MAAAA,CAAOC,UAAU,EAAEjB,OAAO,KAAK;IAC5C;IACA;IACA;IACA;EAAA,CACD;EAEDkB,UAAU,EAAGC,UAAU,IAAK;IAC1B;IACA;IACA;IACA;EAAA,CACD;EAEDC,aAAa,EAAGP,OAAO,IAAK;IAC1B;IACA;IACA;EAAA,CACD;EAEDQ,UAAU,EAAEA,CAAA,KAAMzB,GAAG,CAAC;IAAEY,KAAK,EAAE;EAAK,CAAC;AACvC,CAAC,CAAC,CAAC;AAEH,eAAeb,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}