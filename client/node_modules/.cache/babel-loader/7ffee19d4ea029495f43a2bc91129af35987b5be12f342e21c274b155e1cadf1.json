{"ast":null,"code":"import create from 'zustand';\nconst useBatchStore = create((set, get) => ({\n  // State\n  currentBatch: null,\n  detections: [],\n  loading: false,\n  error: null,\n  // Actions\n  runBatch: async nicheId => {\n    const state = get();\n    if (state.currentBatch) return;\n\n    // For demo, create sample batch\n    set({\n      currentBatch: {\n        nicheId,\n        current: 0,\n        total: 100,\n        startTime: new Date().toISOString()\n      }\n    });\n\n    // Simulate batch progress\n    const interval = setInterval(() => {\n      const current = get().currentBatch;\n      if (!current || current.nicheId !== nicheId) {\n        clearInterval(interval);\n        return;\n      }\n      if (current.current >= current.total) {\n        clearInterval(interval);\n        set({\n          currentBatch: null\n        });\n        return;\n      }\n\n      // Random chance to add detection\n      if (Math.random() > 0.8) {\n        const detection = {\n          id: Date.now(),\n          nicheId,\n          username: `user_${Math.floor(Math.random() * 1000)}`,\n          detectedAt: new Date().toISOString()\n        };\n        get().addDetection(detection);\n      }\n      set({\n        currentBatch: {\n          ...current,\n          current: current.current + 1\n        }\n      });\n    }, 100);\n  },\n  addDetection: detection => {\n    const state = get();\n    set({\n      detections: [...state.detections, detection]\n    });\n  },\n  clearExpiredDetections: () => {\n    const state = get();\n    const now = new Date();\n    const cutoff = new Date(now - 24 * 60 * 60 * 1000); // 24 hours ago\n\n    const validDetections = state.detections.filter(detection => {\n      const detectionTime = new Date(detection.detectedAt);\n      return detectionTime > cutoff;\n    });\n    if (validDetections.length !== state.detections.length) {\n      set({\n        detections: validDetections\n      });\n    }\n  },\n  copyToClipboard: usernames => {\n    const text = usernames.join('\\n');\n    navigator.clipboard.writeText(text).catch(error => {\n      console.error('Failed to copy:', error);\n    });\n  },\n  setLoading: loading => set({\n    loading\n  }),\n  setError: error => set({\n    error\n  }),\n  clearError: () => set({\n    error: null\n  })\n}));\nexport default useBatchStore;","map":{"version":3,"names":["create","useBatchStore","set","get","currentBatch","detections","loading","error","runBatch","nicheId","state","current","total","startTime","Date","toISOString","interval","setInterval","clearInterval","Math","random","detection","id","now","username","floor","detectedAt","addDetection","clearExpiredDetections","cutoff","validDetections","filter","detectionTime","length","copyToClipboard","usernames","text","join","navigator","clipboard","writeText","catch","console","setLoading","setError","clearError"],"sources":["C:/Users/Andrew Scherer/Desktop/IG Story Checker/client/src/stores/batchStore.js"],"sourcesContent":["import create from 'zustand';\r\n\r\nconst useBatchStore = create((set, get) => ({\r\n  // State\r\n  currentBatch: null,\r\n  detections: [],\r\n  loading: false,\r\n  error: null,\r\n\r\n  // Actions\r\n  runBatch: async (nicheId) => {\r\n    const state = get();\r\n    if (state.currentBatch) return;\r\n\r\n    // For demo, create sample batch\r\n    set({\r\n      currentBatch: {\r\n        nicheId,\r\n        current: 0,\r\n        total: 100,\r\n        startTime: new Date().toISOString()\r\n      }\r\n    });\r\n\r\n    // Simulate batch progress\r\n    const interval = setInterval(() => {\r\n      const current = get().currentBatch;\r\n      if (!current || current.nicheId !== nicheId) {\r\n        clearInterval(interval);\r\n        return;\r\n      }\r\n\r\n      if (current.current >= current.total) {\r\n        clearInterval(interval);\r\n        set({ currentBatch: null });\r\n        return;\r\n      }\r\n\r\n      // Random chance to add detection\r\n      if (Math.random() > 0.8) {\r\n        const detection = {\r\n          id: Date.now(),\r\n          nicheId,\r\n          username: `user_${Math.floor(Math.random() * 1000)}`,\r\n          detectedAt: new Date().toISOString()\r\n        };\r\n        get().addDetection(detection);\r\n      }\r\n\r\n      set({\r\n        currentBatch: {\r\n          ...current,\r\n          current: current.current + 1\r\n        }\r\n      });\r\n    }, 100);\r\n  },\r\n\r\n  addDetection: (detection) => {\r\n    const state = get();\r\n    set({\r\n      detections: [...state.detections, detection]\r\n    });\r\n  },\r\n\r\n  clearExpiredDetections: () => {\r\n    const state = get();\r\n    const now = new Date();\r\n    const cutoff = new Date(now - 24 * 60 * 60 * 1000); // 24 hours ago\r\n\r\n    const validDetections = state.detections.filter(detection => {\r\n      const detectionTime = new Date(detection.detectedAt);\r\n      return detectionTime > cutoff;\r\n    });\r\n\r\n    if (validDetections.length !== state.detections.length) {\r\n      set({ detections: validDetections });\r\n    }\r\n  },\r\n\r\n  copyToClipboard: (usernames) => {\r\n    const text = usernames.join('\\n');\r\n    navigator.clipboard.writeText(text).catch(error => {\r\n      console.error('Failed to copy:', error);\r\n    });\r\n  },\r\n\r\n  setLoading: (loading) => set({ loading }),\r\n  setError: (error) => set({ error }),\r\n  clearError: () => set({ error: null })\r\n}));\r\n\r\nexport default useBatchStore;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}