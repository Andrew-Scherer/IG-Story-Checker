{"ast":null,"code":"import { makeAutoObservable } from 'mobx';\nclass NicheStore {\n  constructor() {\n    this.niches = [];\n    this.selectedNicheId = null;\n    this.isLoading = false;\n    this.error = null;\n    // State Updates\n    this.setNiches = niches => {\n      this.niches = niches;\n    };\n    this.setSelectedNicheId = id => {\n      this.selectedNicheId = id;\n    };\n    this.setLoading = loading => {\n      this.isLoading = loading;\n    };\n    this.setError = error => {\n      this.error = error;\n    };\n    this.reset = () => {\n      this.niches = [];\n      this.selectedNicheId = null;\n      this.isLoading = false;\n      this.error = null;\n    };\n    // Actions\n    this.fetchNiches = async api => {\n      this.setLoading(true);\n      this.setError(null);\n      try {\n        const response = await api.get('/niches');\n        this.setNiches(response.data);\n      } catch (error) {\n        this.setError(error.message);\n      } finally {\n        this.setLoading(false);\n      }\n    };\n    this.createNiche = async (api, niche) => {\n      this.setLoading(true);\n      this.setError(null);\n      try {\n        const response = await api.post('/niches', niche);\n        this.setNiches([...this.niches, response.data]);\n      } catch (error) {\n        this.setError(error.message);\n      } finally {\n        this.setLoading(false);\n      }\n    };\n    this.updateNiche = async (api, niche) => {\n      this.setLoading(true);\n      this.setError(null);\n      try {\n        const response = await api.put(`/niches/${niche.id}`, niche);\n        this.setNiches(this.niches.map(n => n.id === niche.id ? response.data : n));\n      } catch (error) {\n        this.setError(error.message);\n      } finally {\n        this.setLoading(false);\n      }\n    };\n    this.deleteNiche = async (api, nicheId) => {\n      this.setLoading(true);\n      this.setError(null);\n      try {\n        await api.delete(`/niches/${nicheId}`);\n        this.setNiches(this.niches.filter(n => n.id !== nicheId));\n        if (this.selectedNicheId === nicheId) {\n          this.setSelectedNicheId(null);\n        }\n      } catch (error) {\n        this.setError(error.message);\n      } finally {\n        this.setLoading(false);\n      }\n    };\n    this.reorderNiches = async (api, fromIndex, toIndex) => {\n      this.setLoading(true);\n      this.setError(null);\n      try {\n        // Create new array with updated order\n        const reorderedNiches = [...this.niches];\n        const [movedNiche] = reorderedNiches.splice(fromIndex, 1);\n        reorderedNiches.splice(toIndex, 0, movedNiche);\n\n        // Update order property for each niche\n        const updatedNiches = reorderedNiches.map((niche, index) => ({\n          ...niche,\n          order: index + 1\n        }));\n\n        // Send new order to backend\n        await api.put('/niches/reorder', {\n          nicheIds: updatedNiches.map(n => n.id)\n        });\n        this.setNiches(updatedNiches);\n      } catch (error) {\n        this.setError(error.message);\n      } finally {\n        this.setLoading(false);\n      }\n    };\n    makeAutoObservable(this);\n  }\n  // Selectors\n  get selectedNiche() {\n    return this.niches.find(n => n.id === this.selectedNicheId) || null;\n  }\n  get sortedNiches() {\n    return [...this.niches].sort((a, b) => a.order - b.order);\n  }\n}\nexport const nicheStore = new NicheStore();","map":{"version":3,"names":["makeAutoObservable","NicheStore","constructor","niches","selectedNicheId","isLoading","error","setNiches","setSelectedNicheId","id","setLoading","loading","setError","reset","fetchNiches","api","response","get","data","message","createNiche","niche","post","updateNiche","put","map","n","deleteNiche","nicheId","delete","filter","reorderNiches","fromIndex","toIndex","reorderedNiches","movedNiche","splice","updatedNiches","index","order","nicheIds","selectedNiche","find","sortedNiches","sort","a","b","nicheStore"],"sources":["C:/Users/Andrew Scherer/Desktop/IG Story Checker/client/src/stores/nicheStore.js"],"sourcesContent":["import { makeAutoObservable } from 'mobx';\r\n\r\nclass NicheStore {\r\n  niches = [];\r\n  selectedNicheId = null;\r\n  isLoading = false;\r\n  error = null;\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  // State Updates\r\n  setNiches = (niches) => {\r\n    this.niches = niches;\r\n  };\r\n\r\n  setSelectedNicheId = (id) => {\r\n    this.selectedNicheId = id;\r\n  };\r\n\r\n  setLoading = (loading) => {\r\n    this.isLoading = loading;\r\n  };\r\n\r\n  setError = (error) => {\r\n    this.error = error;\r\n  };\r\n\r\n  reset = () => {\r\n    this.niches = [];\r\n    this.selectedNicheId = null;\r\n    this.isLoading = false;\r\n    this.error = null;\r\n  };\r\n\r\n  // Actions\r\n  fetchNiches = async (api) => {\r\n    this.setLoading(true);\r\n    this.setError(null);\r\n\r\n    try {\r\n      const response = await api.get('/niches');\r\n      this.setNiches(response.data);\r\n    } catch (error) {\r\n      this.setError(error.message);\r\n    } finally {\r\n      this.setLoading(false);\r\n    }\r\n  };\r\n\r\n  createNiche = async (api, niche) => {\r\n    this.setLoading(true);\r\n    this.setError(null);\r\n\r\n    try {\r\n      const response = await api.post('/niches', niche);\r\n      this.setNiches([...this.niches, response.data]);\r\n    } catch (error) {\r\n      this.setError(error.message);\r\n    } finally {\r\n      this.setLoading(false);\r\n    }\r\n  };\r\n\r\n  updateNiche = async (api, niche) => {\r\n    this.setLoading(true);\r\n    this.setError(null);\r\n\r\n    try {\r\n      const response = await api.put(`/niches/${niche.id}`, niche);\r\n      this.setNiches(\r\n        this.niches.map((n) => (n.id === niche.id ? response.data : n))\r\n      );\r\n    } catch (error) {\r\n      this.setError(error.message);\r\n    } finally {\r\n      this.setLoading(false);\r\n    }\r\n  };\r\n\r\n  deleteNiche = async (api, nicheId) => {\r\n    this.setLoading(true);\r\n    this.setError(null);\r\n\r\n    try {\r\n      await api.delete(`/niches/${nicheId}`);\r\n      this.setNiches(this.niches.filter((n) => n.id !== nicheId));\r\n      if (this.selectedNicheId === nicheId) {\r\n        this.setSelectedNicheId(null);\r\n      }\r\n    } catch (error) {\r\n      this.setError(error.message);\r\n    } finally {\r\n      this.setLoading(false);\r\n    }\r\n  };\r\n\r\n  reorderNiches = async (api, fromIndex, toIndex) => {\r\n    this.setLoading(true);\r\n    this.setError(null);\r\n\r\n    try {\r\n      // Create new array with updated order\r\n      const reorderedNiches = [...this.niches];\r\n      const [movedNiche] = reorderedNiches.splice(fromIndex, 1);\r\n      reorderedNiches.splice(toIndex, 0, movedNiche);\r\n\r\n      // Update order property for each niche\r\n      const updatedNiches = reorderedNiches.map((niche, index) => ({\r\n        ...niche,\r\n        order: index + 1\r\n      }));\r\n\r\n      // Send new order to backend\r\n      await api.put('/niches/reorder', {\r\n        nicheIds: updatedNiches.map(n => n.id)\r\n      });\r\n\r\n      this.setNiches(updatedNiches);\r\n    } catch (error) {\r\n      this.setError(error.message);\r\n    } finally {\r\n      this.setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Selectors\r\n  get selectedNiche() {\r\n    return this.niches.find((n) => n.id === this.selectedNicheId) || null;\r\n  }\r\n\r\n  get sortedNiches() {\r\n    return [...this.niches].sort((a, b) => a.order - b.order);\r\n  }\r\n}\r\n\r\nexport const nicheStore = new NicheStore();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}