{"ast":null,"code":"/**\r\n * Batch Store\r\n * Manages batch processing state and operations using Zustand\r\n */\n\nimport create from 'zustand';\n\n/**\r\n * @typedef {Object} BatchProfile\r\n * @property {string} id - Profile ID\r\n * @property {string} username - Instagram username\r\n * @property {string} status - Check status\r\n * @property {boolean} hasStory - Story detection result\r\n * @property {string} [error] - Error message if failed\r\n */\n\n/**\r\n * @typedef {Object} Batch\r\n * @property {string} id - Batch identifier\r\n * @property {string} nicheId - Target niche\r\n * @property {string} status - Batch status\r\n * @property {number} total - Total profiles\r\n * @property {number} completed - Profiles checked\r\n * @property {number} successful - Stories found\r\n * @property {string} startTime - Start timestamp\r\n * @property {string} [endTime] - Completion timestamp\r\n * @property {Array<BatchProfile>} profiles - Batch profiles\r\n */\n\n/**\r\n * @typedef {Object} StoryResult\r\n * @property {string} profileId - Profile identifier\r\n * @property {string} username - Instagram username\r\n * @property {string} nicheId - Profile's niche\r\n * @property {string} detectedAt - Detection timestamp\r\n */\n\n/**\r\n * @typedef {Object} BatchState\r\n * @property {Array<Batch>} batches - Active batches\r\n * @property {Array<StoryResult>} results - Story detections\r\n * @property {boolean} loading - Loading state\r\n * @property {string|null} error - Error message\r\n */\n\nconst useBatchStore = create((set, get) => ({\n  // Initial state\n  batches: [],\n  results: [],\n  loading: false,\n  error: null,\n  // Actions\n  createBatch: async (nicheId, profileCount) => {\n    // TODO: Implementation\n    // 1. Validate parameters\n    // 2. Create batch\n    // 3. Start processing\n    // 4. Update state\n  },\n  cancelBatch: async batchId => {\n    // TODO: Implementation\n    // 1. Stop processing\n    // 2. Update status\n    // 3. Clean up\n  },\n  updateBatchStatus: (batchId, updates) => {\n    // TODO: Implementation\n    // 1. Validate updates\n    // 2. Update batch state\n    // 3. Handle completion\n  },\n  addStoryResult: result => {\n    // TODO: Implementation\n    // 1. Validate result\n    // 2. Add to results\n    // 3. Handle expiration\n  },\n  fetchResults: async (filters = {}) => {\n    // TODO: Implementation\n    // 1. Set loading\n    // 2. Fetch from API\n    // 3. Update state\n  },\n  clearExpiredResults: () => {\n    // TODO: Implementation\n    // 1. Find expired results\n    // 2. Remove from state\n  },\n  getActiveBatchForNiche: nicheId => {\n    // TODO: Implementation\n    // 1. Find active batch\n    // 2. Return batch or null\n  },\n  clearError: () => set({\n    error: null\n  })\n}));\nexport default useBatchStore;","map":{"version":3,"names":["create","useBatchStore","set","get","batches","results","loading","error","createBatch","nicheId","profileCount","cancelBatch","batchId","updateBatchStatus","updates","addStoryResult","result","fetchResults","filters","clearExpiredResults","getActiveBatchForNiche","clearError"],"sources":["C:/Users/Andrew Scherer/Desktop/IG Story Checker/client/src/stores/batchStore.js"],"sourcesContent":["/**\r\n * Batch Store\r\n * Manages batch processing state and operations using Zustand\r\n */\r\n\r\nimport create from 'zustand';\r\n\r\n/**\r\n * @typedef {Object} BatchProfile\r\n * @property {string} id - Profile ID\r\n * @property {string} username - Instagram username\r\n * @property {string} status - Check status\r\n * @property {boolean} hasStory - Story detection result\r\n * @property {string} [error] - Error message if failed\r\n */\r\n\r\n/**\r\n * @typedef {Object} Batch\r\n * @property {string} id - Batch identifier\r\n * @property {string} nicheId - Target niche\r\n * @property {string} status - Batch status\r\n * @property {number} total - Total profiles\r\n * @property {number} completed - Profiles checked\r\n * @property {number} successful - Stories found\r\n * @property {string} startTime - Start timestamp\r\n * @property {string} [endTime] - Completion timestamp\r\n * @property {Array<BatchProfile>} profiles - Batch profiles\r\n */\r\n\r\n/**\r\n * @typedef {Object} StoryResult\r\n * @property {string} profileId - Profile identifier\r\n * @property {string} username - Instagram username\r\n * @property {string} nicheId - Profile's niche\r\n * @property {string} detectedAt - Detection timestamp\r\n */\r\n\r\n/**\r\n * @typedef {Object} BatchState\r\n * @property {Array<Batch>} batches - Active batches\r\n * @property {Array<StoryResult>} results - Story detections\r\n * @property {boolean} loading - Loading state\r\n * @property {string|null} error - Error message\r\n */\r\n\r\nconst useBatchStore = create((set, get) => ({\r\n  // Initial state\r\n  batches: [],\r\n  results: [],\r\n  loading: false,\r\n  error: null,\r\n\r\n  // Actions\r\n  createBatch: async (nicheId, profileCount) => {\r\n    // TODO: Implementation\r\n    // 1. Validate parameters\r\n    // 2. Create batch\r\n    // 3. Start processing\r\n    // 4. Update state\r\n  },\r\n\r\n  cancelBatch: async (batchId) => {\r\n    // TODO: Implementation\r\n    // 1. Stop processing\r\n    // 2. Update status\r\n    // 3. Clean up\r\n  },\r\n\r\n  updateBatchStatus: (batchId, updates) => {\r\n    // TODO: Implementation\r\n    // 1. Validate updates\r\n    // 2. Update batch state\r\n    // 3. Handle completion\r\n  },\r\n\r\n  addStoryResult: (result) => {\r\n    // TODO: Implementation\r\n    // 1. Validate result\r\n    // 2. Add to results\r\n    // 3. Handle expiration\r\n  },\r\n\r\n  fetchResults: async (filters = {}) => {\r\n    // TODO: Implementation\r\n    // 1. Set loading\r\n    // 2. Fetch from API\r\n    // 3. Update state\r\n  },\r\n\r\n  clearExpiredResults: () => {\r\n    // TODO: Implementation\r\n    // 1. Find expired results\r\n    // 2. Remove from state\r\n  },\r\n\r\n  getActiveBatchForNiche: (nicheId) => {\r\n    // TODO: Implementation\r\n    // 1. Find active batch\r\n    // 2. Return batch or null\r\n  },\r\n\r\n  clearError: () => set({ error: null })\r\n}));\r\n\r\nexport default useBatchStore;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,OAAOA,MAAM,MAAM,SAAS;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,aAAa,GAAGD,MAAM,CAAC,CAACE,GAAG,EAAEC,GAAG,MAAM;EAC1C;EACAC,OAAO,EAAE,EAAE;EACXC,OAAO,EAAE,EAAE;EACXC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE,IAAI;EAEX;EACAC,WAAW,EAAE,MAAAA,CAAOC,OAAO,EAAEC,YAAY,KAAK;IAC5C;IACA;IACA;IACA;IACA;EAAA,CACD;EAEDC,WAAW,EAAE,MAAOC,OAAO,IAAK;IAC9B;IACA;IACA;IACA;EAAA,CACD;EAEDC,iBAAiB,EAAEA,CAACD,OAAO,EAAEE,OAAO,KAAK;IACvC;IACA;IACA;IACA;EAAA,CACD;EAEDC,cAAc,EAAGC,MAAM,IAAK;IAC1B;IACA;IACA;IACA;EAAA,CACD;EAEDC,YAAY,EAAE,MAAAA,CAAOC,OAAO,GAAG,CAAC,CAAC,KAAK;IACpC;IACA;IACA;IACA;EAAA,CACD;EAEDC,mBAAmB,EAAEA,CAAA,KAAM;IACzB;IACA;IACA;EAAA,CACD;EAEDC,sBAAsB,EAAGX,OAAO,IAAK;IACnC;IACA;IACA;EAAA,CACD;EAEDY,UAAU,EAAEA,CAAA,KAAMnB,GAAG,CAAC;IAAEK,KAAK,EAAE;EAAK,CAAC;AACvC,CAAC,CAAC,CAAC;AAEH,eAAeN,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}