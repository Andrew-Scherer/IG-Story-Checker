{"ast":null,"code":"import create from 'zustand';\n\n// Generate some dummy detections from the last 24 hours\nconst generateDummyDetections = () => {\n  const detections = [];\n  const now = new Date();\n  const nicheIds = [1, 2, 3]; // Match the dummy niches from nicheStore\n\n  // Generate 50 random detections\n  for (let i = 0; i < 50; i++) {\n    const nicheId = nicheIds[Math.floor(Math.random() * nicheIds.length)];\n    const hoursAgo = Math.random() * 24; // Random time within last 24 hours\n    const detectedAt = new Date(now - hoursAgo * 60 * 60 * 1000);\n    detections.push({\n      id: i + 1,\n      nicheId,\n      username: `${nicheId === 1 ? 'fitness' : nicheId === 2 ? 'fashion' : 'food'}_user_${i + 1}`,\n      detectedAt: detectedAt.toISOString()\n    });\n  }\n  return detections;\n};\nconst useBatchStore = create((set, get) => ({\n  // State\n  currentBatch: null,\n  detections: generateDummyDetections(),\n  loading: false,\n  error: null,\n  // Actions\n  runBatch: async nicheId => {\n    const state = get();\n    if (state.currentBatch) return;\n\n    // Create sample batch\n    set({\n      currentBatch: {\n        nicheId,\n        current: 0,\n        total: 100,\n        startTime: new Date().toISOString()\n      }\n    });\n\n    // Simulate batch progress\n    const interval = setInterval(() => {\n      const current = get().currentBatch;\n      if (!current || current.nicheId !== nicheId) {\n        clearInterval(interval);\n        return;\n      }\n      if (current.current >= current.total) {\n        clearInterval(interval);\n        set({\n          currentBatch: null\n        });\n        return;\n      }\n\n      // 20% chance to add detection\n      if (Math.random() > 0.8) {\n        const detection = {\n          id: Date.now(),\n          nicheId,\n          username: `${nicheId === 1 ? 'fitness' : nicheId === 2 ? 'fashion' : 'food'}_user_${Math.floor(Math.random() * 1000)}`,\n          detectedAt: new Date().toISOString()\n        };\n        get().addDetection(detection);\n      }\n      set({\n        currentBatch: {\n          ...current,\n          current: current.current + 1\n        }\n      });\n    }, 100); // Update every 100ms for demo\n  },\n  addDetection: detection => {\n    const state = get();\n    set({\n      detections: [...state.detections, detection]\n    });\n  },\n  clearExpiredDetections: () => {\n    const state = get();\n    const now = new Date();\n    const cutoff = new Date(now - 24 * 60 * 60 * 1000); // 24 hours ago\n\n    const validDetections = state.detections.filter(detection => {\n      const detectionTime = new Date(detection.detectedAt);\n      return detectionTime > cutoff;\n    });\n    if (validDetections.length !== state.detections.length) {\n      set({\n        detections: validDetections\n      });\n    }\n  },\n  copyToClipboard: usernames => {\n    const text = usernames.join('\\n');\n    navigator.clipboard.writeText(text).catch(error => {\n      console.error('Failed to copy:', error);\n    });\n  },\n  setLoading: loading => set({\n    loading\n  }),\n  setError: error => set({\n    error\n  }),\n  clearError: () => set({\n    error: null\n  })\n}));\nexport default useBatchStore;","map":{"version":3,"names":["create","generateDummyDetections","detections","now","Date","nicheIds","i","nicheId","Math","floor","random","length","hoursAgo","detectedAt","push","id","username","toISOString","useBatchStore","set","get","currentBatch","loading","error","runBatch","state","current","total","startTime","interval","setInterval","clearInterval","detection","addDetection","clearExpiredDetections","cutoff","validDetections","filter","detectionTime","copyToClipboard","usernames","text","join","navigator","clipboard","writeText","catch","console","setLoading","setError","clearError"],"sources":["C:/Users/Andrew Scherer/Desktop/IG Story Checker/client/src/stores/batchStore.js"],"sourcesContent":["import create from 'zustand';\r\n\r\n// Generate some dummy detections from the last 24 hours\r\nconst generateDummyDetections = () => {\r\n  const detections = [];\r\n  const now = new Date();\r\n  const nicheIds = [1, 2, 3]; // Match the dummy niches from nicheStore\r\n\r\n  // Generate 50 random detections\r\n  for (let i = 0; i < 50; i++) {\r\n    const nicheId = nicheIds[Math.floor(Math.random() * nicheIds.length)];\r\n    const hoursAgo = Math.random() * 24; // Random time within last 24 hours\r\n    const detectedAt = new Date(now - hoursAgo * 60 * 60 * 1000);\r\n\r\n    detections.push({\r\n      id: i + 1,\r\n      nicheId,\r\n      username: `${nicheId === 1 ? 'fitness' : nicheId === 2 ? 'fashion' : 'food'}_user_${i + 1}`,\r\n      detectedAt: detectedAt.toISOString()\r\n    });\r\n  }\r\n\r\n  return detections;\r\n};\r\n\r\nconst useBatchStore = create((set, get) => ({\r\n  // State\r\n  currentBatch: null,\r\n  detections: generateDummyDetections(),\r\n  loading: false,\r\n  error: null,\r\n\r\n  // Actions\r\n  runBatch: async (nicheId) => {\r\n    const state = get();\r\n    if (state.currentBatch) return;\r\n\r\n    // Create sample batch\r\n    set({\r\n      currentBatch: {\r\n        nicheId,\r\n        current: 0,\r\n        total: 100,\r\n        startTime: new Date().toISOString()\r\n      }\r\n    });\r\n\r\n    // Simulate batch progress\r\n    const interval = setInterval(() => {\r\n      const current = get().currentBatch;\r\n      if (!current || current.nicheId !== nicheId) {\r\n        clearInterval(interval);\r\n        return;\r\n      }\r\n\r\n      if (current.current >= current.total) {\r\n        clearInterval(interval);\r\n        set({ currentBatch: null });\r\n        return;\r\n      }\r\n\r\n      // 20% chance to add detection\r\n      if (Math.random() > 0.8) {\r\n        const detection = {\r\n          id: Date.now(),\r\n          nicheId,\r\n          username: `${nicheId === 1 ? 'fitness' : nicheId === 2 ? 'fashion' : 'food'}_user_${Math.floor(Math.random() * 1000)}`,\r\n          detectedAt: new Date().toISOString()\r\n        };\r\n        get().addDetection(detection);\r\n      }\r\n\r\n      set({\r\n        currentBatch: {\r\n          ...current,\r\n          current: current.current + 1\r\n        }\r\n      });\r\n    }, 100); // Update every 100ms for demo\r\n  },\r\n\r\n  addDetection: (detection) => {\r\n    const state = get();\r\n    set({\r\n      detections: [...state.detections, detection]\r\n    });\r\n  },\r\n\r\n  clearExpiredDetections: () => {\r\n    const state = get();\r\n    const now = new Date();\r\n    const cutoff = new Date(now - 24 * 60 * 60 * 1000); // 24 hours ago\r\n\r\n    const validDetections = state.detections.filter(detection => {\r\n      const detectionTime = new Date(detection.detectedAt);\r\n      return detectionTime > cutoff;\r\n    });\r\n\r\n    if (validDetections.length !== state.detections.length) {\r\n      set({ detections: validDetections });\r\n    }\r\n  },\r\n\r\n  copyToClipboard: (usernames) => {\r\n    const text = usernames.join('\\n');\r\n    navigator.clipboard.writeText(text).catch(error => {\r\n      console.error('Failed to copy:', error);\r\n    });\r\n  },\r\n\r\n  setLoading: (loading) => set({ loading }),\r\n  setError: (error) => set({ error }),\r\n  clearError: () => set({ error: null })\r\n}));\r\n\r\nexport default useBatchStore;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}