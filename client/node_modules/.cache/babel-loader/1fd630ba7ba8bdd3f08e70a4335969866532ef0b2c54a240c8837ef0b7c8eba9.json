{"ast":null,"code":"/**\r\n * Settings Store\r\n * Manages application settings and configuration using Zustand\r\n */\n\nimport create from 'zustand';\n\n/**\r\n * @typedef {Object} RateLimits\r\n * @property {number} profilesPerMinute - Max profiles to check per minute\r\n * @property {number} threadsCount - Number of concurrent threads\r\n * @property {number} batchSize - Default batch size\r\n */\n\n/**\r\n * @typedef {Object} Proxy\r\n * @property {string} id - Unique identifier\r\n * @property {string} host - Proxy host\r\n * @property {number} port - Proxy port\r\n * @property {string} [username] - Auth username\r\n * @property {string} [password] - Auth password\r\n * @property {boolean} active - Whether proxy is active\r\n * @property {string} lastTested - Last test timestamp\r\n */\n\n/**\r\n * @typedef {Object} SystemSettings\r\n * @property {boolean} autoTrigger - Enable automatic batch triggering\r\n * @property {number} resultRetention - Hours to keep results\r\n * @property {boolean} notificationsEnabled - Enable notifications\r\n */\n\n/**\r\n * @typedef {Object} StoryTargets\r\n * @property {number} minStories - Minimum stories required\r\n * @property {number} maxStories - Maximum stories allowed\r\n * @property {number} minFollowers - Minimum followers required\r\n * @property {number} maxFollowers - Maximum followers allowed\r\n * @property {number} minEngagement - Minimum engagement rate\r\n * @property {number} maxEngagement - Maximum engagement rate\r\n */\n\n/**\r\n * @typedef {Object} SettingsState\r\n * @property {RateLimits} rateLimits - Rate limiting settings\r\n * @property {Array<Proxy>} proxies - Configured proxies\r\n * @property {SystemSettings} system - System settings\r\n * @property {StoryTargets} targets - Story target settings\r\n * @property {boolean} loading - Loading state\r\n * @property {string|null} error - Error message\r\n */\n\nconst useSettingsStore = create((set, get) => ({\n  // Initial state\n  rateLimits: {\n    profilesPerMinute: 30,\n    threadsCount: 3,\n    batchSize: 100\n  },\n  proxies: [],\n  system: {\n    autoTrigger: true,\n    resultRetention: 24,\n    notificationsEnabled: true\n  },\n  loading: false,\n  targets: {\n    minStories: 1,\n    maxStories: 10,\n    minFollowers: 1000,\n    maxFollowers: 100000,\n    minEngagement: 1,\n    maxEngagement: 10\n  },\n  error: null,\n  // Actions\n  fetchSettings: async () => {\n    // TODO: Implementation\n    // 1. Load from API\n    // 2. Update state\n    // 3. Handle errors\n  },\n  updateRateLimits: async updates => {\n    // TODO: Implementation\n    // 1. Validate limits\n    // 2. Save to API\n    // 3. Update state\n  },\n  addProxy: async proxy => {\n    try {\n      const newProxy = {\n        ...proxy,\n        id: Date.now(),\n        // Temporary ID generation\n        active: true,\n        lastTested: new Date().toISOString()\n      };\n      set(state => ({\n        proxies: [...state.proxies, newProxy]\n      }));\n    } catch (error) {\n      set({\n        error: error.message\n      });\n    }\n  },\n  removeProxy: async proxyId => {\n    try {\n      set(state => ({\n        proxies: state.proxies.filter(p => Array.isArray(proxyId) ? !proxyId.includes(p.id) : p.id !== proxyId)\n      }));\n    } catch (error) {\n      set({\n        error: error.message\n      });\n    }\n  },\n  updateProxy: async (id, updates) => {\n    try {\n      set(state => ({\n        proxies: state.proxies.map(proxy => proxy.id === id ? {\n          ...proxy,\n          ...updates\n        } : proxy)\n      }));\n    } catch (error) {\n      set({\n        error: error.message\n      });\n    }\n  },\n  testProxy: async proxy => {\n    try {\n      // Simulate proxy test with random latency\n      const latency = Math.floor(Math.random() * 200) + 50;\n      const success = Math.random() > 0.2; // 80% success rate\n\n      if (!success) {\n        throw new Error('Connection failed');\n      }\n      set(state => ({\n        proxies: state.proxies.map(p => p.id === proxy.id ? {\n          ...p,\n          lastTested: new Date().toISOString()\n        } : p)\n      }));\n      return {\n        success: true,\n        latency\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  },\n  updateSystemSettings: async updates => {\n    // TODO: Implementation\n    // 1. Validate settings\n    // 2. Save to API\n    // 3. Update state\n  },\n  resetSettings: async () => {\n    // TODO: Implementation\n    // 1. Confirm reset\n    // 2. Reset in API\n    // 3. Update state\n  },\n  updateTargets: async updates => {\n    try {\n      set(state => ({\n        targets: {\n          ...state.targets,\n          ...updates\n        }\n      }));\n    } catch (error) {\n      set({\n        error: error.message\n      });\n    }\n  },\n  clearError: () => set({\n    error: null\n  })\n}));\nexport default useSettingsStore;","map":{"version":3,"names":["create","useSettingsStore","set","get","rateLimits","profilesPerMinute","threadsCount","batchSize","proxies","system","autoTrigger","resultRetention","notificationsEnabled","loading","targets","minStories","maxStories","minFollowers","maxFollowers","minEngagement","maxEngagement","error","fetchSettings","updateRateLimits","updates","addProxy","proxy","newProxy","id","Date","now","active","lastTested","toISOString","state","message","removeProxy","proxyId","filter","p","Array","isArray","includes","updateProxy","map","testProxy","latency","Math","floor","random","success","Error","updateSystemSettings","resetSettings","updateTargets","clearError"],"sources":["C:/Users/Andrew Scherer/Desktop/IG Story Checker/client/src/stores/settingsStore.js"],"sourcesContent":["/**\r\n * Settings Store\r\n * Manages application settings and configuration using Zustand\r\n */\r\n\r\nimport create from 'zustand';\r\n\r\n/**\r\n * @typedef {Object} RateLimits\r\n * @property {number} profilesPerMinute - Max profiles to check per minute\r\n * @property {number} threadsCount - Number of concurrent threads\r\n * @property {number} batchSize - Default batch size\r\n */\r\n\r\n/**\r\n * @typedef {Object} Proxy\r\n * @property {string} id - Unique identifier\r\n * @property {string} host - Proxy host\r\n * @property {number} port - Proxy port\r\n * @property {string} [username] - Auth username\r\n * @property {string} [password] - Auth password\r\n * @property {boolean} active - Whether proxy is active\r\n * @property {string} lastTested - Last test timestamp\r\n */\r\n\r\n/**\r\n * @typedef {Object} SystemSettings\r\n * @property {boolean} autoTrigger - Enable automatic batch triggering\r\n * @property {number} resultRetention - Hours to keep results\r\n * @property {boolean} notificationsEnabled - Enable notifications\r\n */\r\n\r\n/**\r\n * @typedef {Object} StoryTargets\r\n * @property {number} minStories - Minimum stories required\r\n * @property {number} maxStories - Maximum stories allowed\r\n * @property {number} minFollowers - Minimum followers required\r\n * @property {number} maxFollowers - Maximum followers allowed\r\n * @property {number} minEngagement - Minimum engagement rate\r\n * @property {number} maxEngagement - Maximum engagement rate\r\n */\r\n\r\n/**\r\n * @typedef {Object} SettingsState\r\n * @property {RateLimits} rateLimits - Rate limiting settings\r\n * @property {Array<Proxy>} proxies - Configured proxies\r\n * @property {SystemSettings} system - System settings\r\n * @property {StoryTargets} targets - Story target settings\r\n * @property {boolean} loading - Loading state\r\n * @property {string|null} error - Error message\r\n */\r\n\r\nconst useSettingsStore = create((set, get) => ({\r\n  // Initial state\r\n  rateLimits: {\r\n    profilesPerMinute: 30,\r\n    threadsCount: 3,\r\n    batchSize: 100\r\n  },\r\n  proxies: [],\r\n  system: {\r\n    autoTrigger: true,\r\n    resultRetention: 24,\r\n    notificationsEnabled: true\r\n  },\r\n  loading: false,\r\n  targets: {\r\n    minStories: 1,\r\n    maxStories: 10,\r\n    minFollowers: 1000,\r\n    maxFollowers: 100000,\r\n    minEngagement: 1,\r\n    maxEngagement: 10\r\n  },\r\n  error: null,\r\n\r\n  // Actions\r\n  fetchSettings: async () => {\r\n    // TODO: Implementation\r\n    // 1. Load from API\r\n    // 2. Update state\r\n    // 3. Handle errors\r\n  },\r\n\r\n  updateRateLimits: async (updates) => {\r\n    // TODO: Implementation\r\n    // 1. Validate limits\r\n    // 2. Save to API\r\n    // 3. Update state\r\n  },\r\n\r\n  addProxy: async (proxy) => {\r\n    try {\r\n      const newProxy = {\r\n        ...proxy,\r\n        id: Date.now(), // Temporary ID generation\r\n        active: true,\r\n        lastTested: new Date().toISOString()\r\n      };\r\n      set(state => ({\r\n        proxies: [...state.proxies, newProxy]\r\n      }));\r\n    } catch (error) {\r\n      set({ error: error.message });\r\n    }\r\n  },\r\n\r\n  removeProxy: async (proxyId) => {\r\n    try {\r\n      set(state => ({\r\n        proxies: state.proxies.filter(p => \r\n          Array.isArray(proxyId) ? !proxyId.includes(p.id) : p.id !== proxyId\r\n        )\r\n      }));\r\n    } catch (error) {\r\n      set({ error: error.message });\r\n    }\r\n  },\r\n\r\n  updateProxy: async (id, updates) => {\r\n    try {\r\n      set(state => ({\r\n        proxies: state.proxies.map(proxy =>\r\n          proxy.id === id ? { ...proxy, ...updates } : proxy\r\n        )\r\n      }));\r\n    } catch (error) {\r\n      set({ error: error.message });\r\n    }\r\n  },\r\n\r\n  testProxy: async (proxy) => {\r\n    try {\r\n      // Simulate proxy test with random latency\r\n      const latency = Math.floor(Math.random() * 200) + 50;\r\n      const success = Math.random() > 0.2; // 80% success rate\r\n\r\n      if (!success) {\r\n        throw new Error('Connection failed');\r\n      }\r\n\r\n      set(state => ({\r\n        proxies: state.proxies.map(p =>\r\n          p.id === proxy.id ? { ...p, lastTested: new Date().toISOString() } : p\r\n        )\r\n      }));\r\n\r\n      return { success: true, latency };\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  },\r\n\r\n  updateSystemSettings: async (updates) => {\r\n    // TODO: Implementation\r\n    // 1. Validate settings\r\n    // 2. Save to API\r\n    // 3. Update state\r\n  },\r\n\r\n  resetSettings: async () => {\r\n    // TODO: Implementation\r\n    // 1. Confirm reset\r\n    // 2. Reset in API\r\n    // 3. Update state\r\n  },\r\n\r\n  updateTargets: async (updates) => {\r\n    try {\r\n      set(state => ({\r\n        targets: { ...state.targets, ...updates }\r\n      }));\r\n    } catch (error) {\r\n      set({ error: error.message });\r\n    }\r\n  },\r\n\r\n  clearError: () => set({ error: null })\r\n}));\r\n\r\nexport default useSettingsStore;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}