{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Andrew Scherer\\\\Desktop\\\\IG Story Checker\\\\client\\\\src\\\\components\\\\niche\\\\FileImporter.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './FileImporter.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FileImporter = ({\n  onImport,\n  allowedTypes,\n  maxSize\n}) => {\n  _s();\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const validateFile = file => {\n    const extension = '.' + file.name.split('.').pop().toLowerCase();\n    if (!allowedTypes.includes(extension)) {\n      throw new Error('Invalid file type. Allowed types: ' + allowedTypes.join(', '));\n    }\n    if (file.size > maxSize) {\n      throw new Error('File too large. Maximum size: ' + maxSize / (1024 * 1024) + 'MB');\n    }\n  };\n  const handleFile = async file => {\n    try {\n      setError('');\n      setIsLoading(true);\n      validateFile(file);\n      await onImport(file);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleInputChange = e => {\n    const file = e.target.files[0];\n    if (file) {\n      handleFile(file);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"file-importer\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-importer__input-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: allowedTypes.join(','),\n        onChange: handleInputChange,\n        className: \"file-importer__input\",\n        disabled: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Importing...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 23\n      }, this), error && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"file-importer__error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(FileImporter, \"yuk4HmA6px6aynbC3ZJFnwneY7I=\");\n_c = FileImporter;\nFileImporter.propTypes = {\n  onImport: PropTypes.func.isRequired,\n  allowedTypes: PropTypes.arrayOf(PropTypes.string).isRequired,\n  maxSize: PropTypes.number.isRequired\n};\nexport default FileImporter;\nvar _c;\n$RefreshReg$(_c, \"FileImporter\");","map":{"version":3,"names":["React","useState","PropTypes","jsxDEV","_jsxDEV","FileImporter","onImport","allowedTypes","maxSize","_s","error","setError","isLoading","setIsLoading","validateFile","file","extension","name","split","pop","toLowerCase","includes","Error","join","size","handleFile","err","message","handleInputChange","e","target","files","className","children","type","accept","onChange","disabled","fileName","_jsxFileName","lineNumber","columnNumber","_c","propTypes","func","isRequired","arrayOf","string","number","$RefreshReg$"],"sources":["C:/Users/Andrew Scherer/Desktop/IG Story Checker/client/src/components/niche/FileImporter.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './FileImporter.scss';\r\n\r\nconst FileImporter = ({ onImport, allowedTypes, maxSize }) => {\r\n  const [error, setError] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const validateFile = (file) => {\r\n    const extension = '.' + file.name.split('.').pop().toLowerCase();\r\n    \r\n    if (!allowedTypes.includes(extension)) {\r\n      throw new Error('Invalid file type. Allowed types: ' + allowedTypes.join(', '));\r\n    }\r\n    \r\n    if (file.size > maxSize) {\r\n      throw new Error('File too large. Maximum size: ' + (maxSize / (1024 * 1024)) + 'MB');\r\n    }\r\n  };\r\n\r\n  const handleFile = async (file) => {\r\n    try {\r\n      setError('');\r\n      setIsLoading(true);\r\n      validateFile(file);\r\n      await onImport(file);\r\n    } catch (err) {\r\n      setError(err.message);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    const file = e.target.files[0];\r\n    if (file) {\r\n      handleFile(file);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"file-importer\">\r\n      <div className=\"file-importer__input-group\">\r\n        <input\r\n          type=\"file\"\r\n          accept={allowedTypes.join(',')}\r\n          onChange={handleInputChange}\r\n          className=\"file-importer__input\"\r\n          disabled={isLoading}\r\n        />\r\n        {isLoading && <span>Importing...</span>}\r\n        {error && <span className=\"file-importer__error\">{error}</span>}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nFileImporter.propTypes = {\r\n  onImport: PropTypes.func.isRequired,\r\n  allowedTypes: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  maxSize: PropTypes.number.isRequired\r\n};\r\n\r\nexport default FileImporter;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}